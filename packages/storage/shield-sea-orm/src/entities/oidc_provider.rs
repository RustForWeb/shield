//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[cfg_attr(feature = "utoipa", derive(utoipa::ToSchema))]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "oidc_provider_pkce_code_challenge"
)]
pub enum OidcProviderPkceCodeChallenge {
    #[sea_orm(string_value = "none")]
    None,
    #[sea_orm(string_value = "plain")]
    Plain,
    #[sea_orm(string_value = "s256")]
    S256,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[cfg_attr(feature = "utoipa", derive(utoipa::ToSchema))]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "oidc_provider_type")]
pub enum OidcProviderType {
    #[sea_orm(string_value = "custom")]
    Custom,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[cfg_attr(feature = "utoipa", derive(utoipa::ToSchema))]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "oidc_provider_visibility"
)]
pub enum OidcProviderVisibility {
    #[sea_orm(string_value = "public")]
    Public,
    #[sea_orm(string_value = "unlisted")]
    Unlisted,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[cfg_attr(feature = "utoipa", derive(utoipa::ToSchema), schema(as = OidcProvider))]
#[sea_orm(table_name = "oidc_provider")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: chrono::DateTime<chrono::FixedOffset>,
    pub updated_at: chrono::DateTime<chrono::FixedOffset>,
    pub name: String,
    pub slug: Option<String>,
    pub r#type: OidcProviderType,
    pub visibility: OidcProviderVisibility,
    #[sea_orm(column_type = "Text")]
    pub client_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub client_secret: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub scopes: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub redirect_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub discovery_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub issuer_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub authorization_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub authorization_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub token_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub token_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub introspection_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub introspection_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub revocation_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub revocation_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub user_info_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub json_web_key_set_url: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub json_web_key_set: Option<Json>,
    pub pkce_code_challenge: OidcProviderPkceCodeChallenge,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::oidc_provider_connection::Entity")]
    OidcProviderConnection,
}

impl Related<super::oidc_provider_connection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OidcProviderConnection.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
